#!/usr/bin/env ruby

require "runa"
require "thor"
require "fileutils"

class RunaCli < Thor
  def self.exit_on_failure?
    true
  end

  desc "new NAME", "Create a new application"
  def new(name)
    if FileTest.exist?(name)
      raise Thor::Error, "ERROR: '#{File.absolute_path(name)}' already exists"
    end

    module_name = name.split("_").map { |e| e.capitalize }.join

    FileUtils.mkdir_p(name)
    Dir.chdir(name) do
      FileUtils.mkdir_p(".bundle")
      File.write(".bundle/config", "---\nBUNDLE_PATH: \"vendor/bundle\"\n")
      FileUtils.mkdir_p("lib/#{name}")
      File.write("lib/#{name}.rb", "require \"#{name}/lib\"\n")
      File.write("lib/#{name}/lib.rb", "module #{module_name}\nend\n")
      File.write(".gitignore", "/vendor/\n/.runa/\n")
      File.write("Gemfile", "# frozen_string_literal: true\n\nsource \"https://rubygems.org\"\n\n# gem \"rails\"\n")
      File.write("main.rb", "require \"#{name}\"\n\nputs \"Hello, world!\"")
    end
  end

  desc "install", "Install gems"
  def install
    system("bundle install")
    generate_load_path_script
  end

  desc "run [ARGS]", "Run application with arguments"
  def run_command(*args)
    system("bundle exec ruby -Ilib main.rb #{args.join(" ")}")
  end
  map "run" => "run_command"

  desc "generate", "Generate scripts for production execution"
  def generate
    root_dir = File.expand_path(".")
    generate_script_name = File.basename(root_dir)
    FileUtils.mkdir_p(RUNA_DIR)
    generate_load_path_script
    path = File.join(RUNA_DIR, "#{generate_script_name}.bat")
    File.write(path, generate_script(root_dir))
    puts "Generate '#{path}'\n'#{path}' is the script to run. Copy it to any location and use it."
  end

  private

  RUNA_DIR = ".runa"

  def generate_script(root_dir)
    # TODO: Linux
    lib_dir = File.join(root_dir, "lib").tr("/", "\\")
    runa_dir = File.join(root_dir, RUNA_DIR).tr("/", "\\")
    main_rb = File.join(root_dir, "main.rb").tr("/", "\\")

    <<~EOS
      @ECHO OFF
      @ruby -I"#{lib_dir}" -I"#{runa_dir}" -rruna_load_path #{main_rb} %*"
    EOS
  end

  def generate_load_path_script
    path = "#{RUNA_DIR}/runa_load_path.rb"
    File.write(path, load_path_script)
    puts "Generate '#{path}'"
  end

  def load_path_script
    str = `bundle exec ruby -e 'puts \$LOAD_PATH.grep(/vendor\\/bundle/)'`
    paths = str.split("\n").map { |e| "\"#{e}\"" }.join(",")
    "$LOAD_PATH.unshift(#{paths})\n"
  end
end

RunaCli.start(ARGV)
